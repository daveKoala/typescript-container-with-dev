version: '3.7'

services:
  ts-node-docker:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    volumes:
      - ./src:/home/node/app/src
      - ./nodemon.json:/home/node/app/nodemon.json
    container_name: core-app
    expose:
      - '8080'
    ports:
      - '8080:8080'
    command: npm run dev
    environment:
      - BUILD_ID=dev-container
      - NODE_ENV=development
      - PORT=8080
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
      - MONGODB_URL=mongodb://mongodb:27017/node-boilerplate
    depends_on:
      - redis
      - mongodb
    networks:
      - node-network

  ts-node-docker2:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    volumes:
      - ./src:/home/node/app/src
      - ./nodemon.json:/home/node/app/nodemon.json
    container_name: core-app-2
    expose:
      - '8081'
    ports:
      - '8081:8081'
    command: npm run dev
    environment:
      - BUILD_ID=dev-container-2
      - NODE_ENV=development
      - PORT=8081
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
      - MONGODB_URL=mongodb://mongodb:27017/node-boilerplate
    depends_on:
      - redis
      - mongodb
    networks:
      - node-network
  
  redis:
    image: redis:6.2-alpine
    restart: always
    container_name: cache
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes: 
      - cache:/data
    networks:
      - node-network

  mongodb:
    image: mongo:6-jammy
    ports:
      - '27017:27017'
    volumes:
      - dbdata:/data/db
    networks:
      - node-network
    logging:
      driver: "none"

volumes:
  dbdata:
  cache:
    driver: local

networks:
  node-network:
    driver: bridge